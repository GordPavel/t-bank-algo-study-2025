//public static int countGreaterPairs(int[] a, int[] b) {
//    int i = 0, j = 0;
//    int count = 0;
//
//    while (i < a.length && j < b.length) {
//        if (a[i] > b[j]) {
//            count += a.length - i; // Все оставшиеся элементы в a больше b[j]
//            j++;
//        } else {
//            i++;
//        }
//    }
//
//    return count;
//}
//
//public static void main(String[] args) {
//    int[] a = {1, 3, 5, 7, 9};
//    int[] b = {2, 4, 6, 8, 10};
//    System.out.println("Количество пар, где ai > bj: " + countGreaterPairs(a, b));
//}
//
//


//Для данной задачи важно использовать тот факт, что массивы отсортированы, что позволяет решить её за линейное время \(O(n)\). Вместо вложенных циклов мы воспользуемся подходом с двойным указателем (two-pointer technique).
//
//### Решение:
//
//```java
public class CountPairs {
    public static void main(String[] args) {
        int[] a = {1, 2, 3};  // Предполагается, что массивы отсортированы
        int[] b = {1, 1, 1};

        System.out.println(countPairs(a, b));  // Ожидаемый результат: 3
    }

    // Метод для подсчёта числа пар (i, j), где a[i] > b[j]
    public static int countPairs(int[] a, int[] b) {
        int n = a.length;
        int m = b.length;

        int i = 0;  // Указатель для массива `a`
        int j = 0;  // Указатель для массива `b`
        int count = 0;

        while (i < n && j < m) {
            if (a[i] > b[j]) {
                // Если a[i] > b[j], то все элементы a начиная с i подходят для данного j
                count += (n - i);  // Добавляем оставшееся количество элементов в a
                j++;  // Проверяем следующий элемент в b
            } else {
                i++;  // Двигаем указатель i, если a[i] <= b[j]
            }
        }

        return count;
    }
}
//```
//
//---
//
//### Объяснение:
//
//1. **Идея**: Мы используем два указателя:
//   - `i` — для перебора элементов массива `a`.
//   - `j` — для перебора элементов массива `b`.
//
//2. **Логика**:
//   - Если текущий элемент `a[i] > b[j]`, то все последующие элементы (от `i` до конца `a`) гарантированно больше `b[j]`, так как массивы отсортированы.
//   - Увеличиваем счётчик на количество оставшихся элементов в `a` (\(n - i\)), и идём к следующему элементу массива `b`.
//   - В противном случае двигаем указатель `i` вперёд.
//
//3. **Время работы**:
//   - Указатели `i` и `j` бегут по массивам максимум один раз, так что сложность алгоритма линейная — \(O(n + m)\).
//
//---
//
//### Пример работы:
//Для массивов:
//- a = {1, 2, 3}, b = {1, 1, 1}.
//  - Инициализация: \(i = 0, j = 0, count = 0\).
//  - На итерации \(j = 0\): `a[i] = 1, b[j] = 1`, двигаем \(i\).
//  - \(j = 0, i = 1\): `a[i] = 2, b[j] = 1`, добавляем \(n - i = 3 - 1 = 2\) в `count`.
//  - \(count = 2\), \(j = 1\): аналогично → добавляем ещё \(n - i = 2\).
//  - Финальный `count = 3`.
//
//Результат: 3.